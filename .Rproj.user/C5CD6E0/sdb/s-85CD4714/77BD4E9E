{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(ggplot2)\n\ndonnees = mtcars[,c(\"mpg\", \"cyl\", \"hp\", \"am\")]\nnames(donnees) = c(\"A\", \"B\", \"C\", \"D\")\ndonnees$B = factor(donnees$B)\ndonnees$D = factor(donnees$D)\n\n## Fonction permettant de récupérer le code\ncode <- function(package, type, choix) {\n    if (is.null(type) | is.null(choix)) return(NULL)\n    if (type == 1) {\n        # Univarié - Quanti\n        if (choix == 1) {\n            # Histogramme\n            if (package == \"base\")\n                return(expression(hist(donnees$A)))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(A)) +\n                                      geom_histogram()))\n        } else if (choix == 2) {\n            # Boîte à moustache\n            if (package == \"base\")\n                return(expression(boxplot(donnees$A)))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(\"\", A)) +\n                                      geom_boxplot()))\n        } else if (choix == 3) {\n            # QQ-plot            \n            if (package == \"base\")\n                return(expression({qqnorm(donnees$A);qqline(donnees$A)}))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(sample = A)) +\n                                      geom_qq()))\n        }\n    } else if (type == 2) {\n        # Univarié - qualitatif\n        if (choix == 1) {\n            # Diagramme en barres\n            if (package == \"base\")\n                return(expression(barplot(table(donnees$B))))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(B)) +\n                                      geom_bar()))\n        } else if (choix == 2) {\n            # Diagramme en barres empilées\n            if (package == \"base\")\n                return(expression(barplot(as.matrix(table(donnees$B)))))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(\"\", fill = B)) +\n                                      geom_bar()))\n        } else if (choix == 3) {\n            # Diagramme circulaire\n            if (package == \"base\")\n                return(expression(pie(table(donnees$B))))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(\"\", fill = B)) +\n                                      geom_bar(width = 1) +\n                                      coord_polar(theta = \"y\")))\n                    }\n    } else if (type == 3) {\n        # Bivarié - Quanti-Quanti\n        if (choix == 1) {\n            # Nuage de points\n            if (package == \"base\")\n                return(expression(plot(A ~ C, data = donnees)))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(C, A)) +\n                                      geom_point()))\n        } else if (choix == 2) {\n            # Heatmap\n            if (package == \"base\")\n                return(expression({\n                    cutX = cut(donnees$C, breaks = 30)\n                    cutY = cut(donnees$A, breaks = 30)\n                    image(table(cutX, cutY))\n                }))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(C, A)) +\n                                      geom_bin2d()))\n        }\n    } else if (type == 4) {\n        # Bivarié - Quali-Quali\n        if (choix == 1) {\n            # Diagramme en barres séparées\n            if (package == \"base\")\n                return(expression(barplot(table(donnees$D, donnees$B), beside = T)))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(B, fill = D)) +\n                                      geom_bar(position = \"dodge\")))\n        } else if (choix == 2) {\n            # Diagramme en barres empilées\n            if (package == \"base\")\n                return(expression(barplot(table(donnees$D, donnees$B))))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(B, fill = D)) +\n                                      geom_bar()))\n        } else if (choix == 3) {\n            # Diagramme en barres empilées à 100%\n            if (package == \"base\")\n                return(expression({\n                    t = table(donnees$D, donnees$B)\n                    p = prop.table(t, margin = 2)\n                    barplot(p)\n                }))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(B, fill = D)) +\n                                      geom_bar(position = \"fill\")))\n        } else if (choix == 4) {\n            # Heatmap\n            if (package == \"base\")\n                return(expression({\n                    image(table(donnees$B, donnees$D))\n                }))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(B, D)) +\n                                      geom_bin2d()))\n        }\n    } else if (type == 5) {\n        # Bivarié - Quali-Quanti\n        if (choix == 1) {\n            # Histogrammes\n            if (package == \"base\")\n                return(expression({\n                    mod = levels(donnees$B)\n                    par(mfrow = c(length(mod), 1), mar = c(2, 2, 2, 0) + .1)\n                    for(m in mod) {\n                        hist(donnees$A[donnees$B == m], main = \"\",\n                             xlim = range(donnees$A))\n                    }\n                }))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(A)) +\n                                      geom_histogram() +\n                                      facet_grid(B~.)))\n        } else if (choix == 2) {\n            # Boîtes à moustaches\n            if (package == \"base\")\n                return(expression(boxplot(A ~ B, data = donnees)))\n            else if (package == \"ggplot2\")\n                return(expression(ggplot(donnees, aes(B, A)) +\n                                      geom_boxplot()))\n        }\n    }\n}\n\n# Define UI for application that draws a histogram\nui <- shinyUI(fluidPage(\n    \n    # Application title\n    titlePanel(\"Comparaison des graphiques de base et de ggplot2\"),\n    p(\"Application web permettant de comparer le code à produire pour réaliser les mêmes graphiques avec le package graphics (de base dans R) et le package ggplot2.\"),\n    \n    fluidRow(\n        column(\n            width = 6,\n            selectInput(\n                \"type\",\n                \"Type de graphiques\",\n                c(\"...\" = 0,\n                  \"Univarié - Quantitatif\" = 1,\n                  \"Univarié - Qualitatif\" = 2,\n                  \"Bivarié - quanti-quanti\" = 3,\n                  \"Bivarié - quali-quali\" = 4,\n                  \"Bivarié - quali-quanti\" = 5)\n            )\n        ),\n        column(\n            width = 6,\n            selectInput(\n                \"choix\",\n                \"Graphique à comparer\",\n                choices = NULL\n            )\n        )\n   ),\n   fluidRow(\n       column(\n           width = 6,\n           h2(\"graphics\"),\n           pre(textOutput(\"codeBase\")),\n           plotOutput(\"plotBase\")\n       ),\n       column(\n           width = 6,\n           h2(\"ggplot2\"),\n           pre(textOutput(\"codeGG\")),\n           plotOutput(\"plotGG\")\n       )\n   )\n))\n\nserver <- shinyServer(function(input, output, session) {\n   \n    # Définition des graphiques à comparer\n    observe({\n        if (input$type == 1) {\n            # Univarié - Quanti\n            updateSelectInput(session, \"choix\", \n                              choices = c(\"Histogramme\" = 1, \n                                          \"Boîte à moustaches\" = 2, \n                                          \"QQ-plot\" = 3))\n        } else if (input$type == 2) {\n            # Univarié - Quali\n            updateSelectInput(session, \"choix\", \n                              choices = c(\"Diagramme en barres\" = 1,\n                                          \"Diagramme en barres empilées\" = 2,\n                                          \"Diagramme circulaire\" = 3))\n        } else if (input$type == 3) {\n            # Bivarié - Quanti-Quanti\n            updateSelectInput(session, \"choix\", \n                              choices = c(\"Nuage de points\" = 1,\n                                          \"Heatmap\" = 2))\n        } else if (input$type == 4) {\n            # Bivarié - Quali-Quali\n            updateSelectInput(session, \"choix\",\n                              choices = c(\"Diagramme en barres séparées\" = 1,\n                                          \"Diagramme en barres empilées\" = 2,\n                                          \"Diagramme en barres empilées à 100%\" = 3,\n                                          \"Heatmap\" = 4))\n        } else if (input$type == 5) {\n            # Bivarié - Quanli-Quanti\n            updateSelectInput(session, \"choix\",\n                              choices = c(\"Histogrammes\" = 1,\n                                          \"Boîtes à moustaches\" = 2))\n        }\n    })\n\n    # Création des graphiques\n    output$codeBase <- renderText({\n        as.character(code(\"base\", type = input$type, choix = input$choix))\n    })\n    output$plotBase <- renderPlot({\n        eval(code(\"base\", type = input$type, choix = input$choix))\n    })\n    output$codeGG <- renderText({\n        gsub(\"\\\\+\", \"+\\n\\t\", as.character(code(\"ggplot2\", type = input$type, choix = input$choix)))\n    })\n    output$plotGG <- renderPlot({\n        eval(code(\"ggplot2\", type = input$type, choix = input$choix))\n    })\n})\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1460642122072.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2211230657",
    "id" : "77BD4E9E",
    "lastKnownWriteTime" : 1460642245,
    "last_content_update" : 1460642245730,
    "path" : "~/Sites/compare-base-ggplot/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}